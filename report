1) Тема
Личный секретарь
2) Репозиторий
https://github.com/firelina/personal_security
3) Первоначальные требования
1. Требования к управлению пользователями
Use Case: Регистрация пользователя
- Система должна позволять пользователю регистрироваться, предоставляя необходимые данные (имя, email, пароль).
- После успешной регистрации система должна возвращать уникальный идентификатор нового пользователя.
Use Case: Вход пользователя
- Система должна позволять пользователю входить в систему, предоставляя email и пароль.
- Система должна проверять правильность введенных учетных данных.
- В случае успешного входа система должна возвращать информацию о пользователе.
2. Требования к управлению событиями
Use Case: Создание события
- Система должна позволять пользователю создавать новое событие, предоставляя необходимые данные (название, дата, время, описание).
- Система должна возвращать уникальный идентификатор созданного события.
Use Case: Получение списка событий
- Система должна предоставлять пользователю возможность получать список всех событий.
Use Case: Обновление статуса события
- Система должна позволять пользователю обновлять статус существующего события.
- В случае успешного обновления система должна возвращать обновленное событие.
- В случае отсутствия события система должна возвращать сообщение об ошибке.
3. Требования к управлению напоминаниями
Use Case: Создание напоминания
- Система должна позволять пользователю создавать новое напоминание, привязанное к событию.
Use Case: Получение списка напоминаний
- Система должна предоставлять пользователю возможность получать список всех напоминаний.
Use Case: Отправка напоминаний
- Система должна автоматически отправлять напоминания пользователю за определенное время до события.
4. Требования к управлению контактами
Use Case: Создание контакта
- Система должна позволять пользователю создавать новый контакт, предоставляя необходимые данные (имя, телефон, email).
- Система должна возвращать уникальный идентификатор созданного контакта.
Use Case: Получение списка контактов
- Система должна предоставлять пользователю возможность получать список всех контактов.
4) Модель предметной области
Сущности

User (Пользователь):
ID: Уникальный идентификатор пользователя.
Name: Имя пользователя.
Email: Электронная почта пользователя (должна быть уникальной).
Password: Пароль пользователя (должен храниться в зашифрованном виде).

Event (Событие):
ID: Уникальный идентификатор события.
Title: Название события.
Date: Дата и время события.
Description: Описание события.
Status: Статус события (например, "запланировано", "завершено").
User ID: Идентификатор пользователя, которому принадлежит событие.

Reminder (Напоминание):
ID: Уникальный идентификатор напоминания.
EventID: Идентификатор события, к которому относится напоминание.
ReminderTime: Время, когда должно произойти напоминание.
NotificationMethod: Способ уведомления (например, "email", "push-уведомление").

Contact (Контакт):
ID: Уникальный идентификатор контакта.
Name: Имя контакта.
Phone: Телефон контакта.
Email: Электронная почта контакта.
User ID: Идентификатор пользователя, которому принадлежит контакт.

Агрегаты
User Aggregate:
Сущность: User
Связанные сущности: Event, Contact
Правила: Пользователь может иметь множество событий и контактов.

Event Aggregate:
Сущность: Event
Связанные сущности: Reminder
Правила: Событие может иметь множество напоминаний

5) Инструментарий
язык - go, ide - goLand
6) Модель хранения данных (будет реализовано позднее)
- На уровне приложения - классы как и в бд
- На уровне хранения - СУБД PostgreSQL
7) Реализовать превоначальные требования
Реализованы минимальные требования, настроен линтер, написаны юнит тесты
8) Загрузить на веб-хостинг
Загружено